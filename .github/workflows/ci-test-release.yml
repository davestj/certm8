name: CertM8 CI Test and Release Workflow

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev
  workflow_run:
    workflows: ["CertM8 CI Test and Release Workflow"]
    types:
      - completed

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run tests
      run: |
        pytest --verbose

  release:
    needs: test
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Get latest tag
      id: get_tag
      run: |
        latest_tag=$(git describe --tags --abbrev=0 || echo "1.0.0b")
        echo "latest_tag=$latest_tag" >> $GITHUB_ENV

    - name: Auto-increment version
      id: increment_version
      run: |
        latest_tag=${{ env.latest_tag }}
        version_array=(${latest_tag//./ })
        major=${version_array[0]}
        minor=${version_array[1]}
        patch=${version_array[2]}
        if [[ $patch == *"b"* ]]; then
          patch_number=${patch%b}
          new_patch=$((patch_number + 1))b
        else
          new_patch=$((patch + 1))
        fi
        new_version="$major.$minor.$new_patch"
        echo "new_version=$new_version" >> $GITHUB_ENV

    - name: Create new release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.new_version }}
        name: Release v${{ env.new_version }}
        draft: false
        prerelease: true

    - name: Push new tag
      run: |
        git tag v${{ env.new_version }}
        git push origin v${{ env.new_version }}

